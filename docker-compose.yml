version: '3'
services:
    client:
        image: node:18-alpine
        volumes:
            - ./client:/app
        working_dir: /app
        tty: true
        stdin_open: true
        command: ["npm", "run", "dev","--", "--host", "0.0.0.0"]
        ports:
            - "8000:5173"
    auth-service:
        build:
            context: ./auth
            dockerfile: Dockerfile
            args:
                WWWGROUP: '1000'
        image: auth-service-image
        restart: always
        ports:
            - '${APP_PORT:-81}:80'
        environment:
            WWWUSER: '1000'
        volumes:
            - './auth:/var/www/html'
        networks:
            - ticket-network
        depends_on:
            - kafka
            - auth-mysql
    expiration-service:
        build:
            context: ./expiration
            dockerfile: Dockerfile
            args:
                WWWGROUP: '1000'
        image: expiration-service-image
        restart: always
        ports:
            - '${APP_PORT:-83}:80'
        environment:
            WWWUSER: '1000'
        volumes:
            - './expiration:/var/www/html'
        networks:
            - ticket-network
        depends_on:
            - kafka
            - redis
    order-service:
        build:
            context: ./order
            dockerfile: Dockerfile
            args:
                WWWGROUP: '1000'
        image: order-service-image
        restart: always
        ports:
            - '${APP_PORT:-84}:80'
        environment:
            WWWUSER: '1000'
        volumes:
            - './order:/var/www/html'
        networks:
            - ticket-network
        depends_on:
            - kafka
            - order-mysql
    payment-service:
        build:
            context: ./payment
            dockerfile: Dockerfile
            args:
                WWWGROUP: '1000'
        image: payment-service-image
        restart: always
        ports:
            - '${APP_PORT:-85}:80'
        environment:
            WWWUSER: '1000'
        volumes:
            - './payment:/var/www/html'
        networks:
            - ticket-network
        depends_on:
            - kafka
            - payment-mysql
    ticket-service:
        build:
            context: ./ticket
            dockerfile: Dockerfile
            args:
                WWWGROUP: '1000'
        image: ticket-service-image
        restart: always
        ports:
            - '${APP_PORT:-86}:80'
        environment:
            WWWUSER: '1000'
        volumes:
            - './ticket:/var/www/html'
        networks:
            - ticket-network
        depends_on:
            - kafka
            - ticket-mysql
    auth-mysql:
        image: mysql/mysql-server:8.0
        restart: always
        ports:
            - '${FORWARD_DB_PORT:-3307}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '12345678'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: 'robert'
            MYSQL_USER: 'robert'
            MYSQL_PASSWORD: '12345678'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        networks:
            - ticket-network
        volumes:
            - auth-mysql-volume:/var/lib/mysql
    order-mysql:
        image: mysql/mysql-server:8.0
        restart: always
        ports:
            - '${FORWARD_DB_PORT:-3310}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '12345678'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: 'robert'
            MYSQL_USER: 'robert'
            MYSQL_PASSWORD: '12345678'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        networks:
            - ticket-network
        volumes:
            - order-mysql-volume:/var/lib/mysql
    payment-mysql:
        image: mysql/mysql-server:8.0
        restart: always
        ports:
            - '${FORWARD_DB_PORT:-3311}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '12345678'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: 'robert'
            MYSQL_USER: 'robert'
            MYSQL_PASSWORD: '12345678'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        networks:
            - ticket-network
        volumes:
            - payment-mysql-volume:/var/lib/mysql
    ticket-mysql:
        image: mysql/mysql-server:8.0
        ports:
            - '${FORWARD_DB_PORT:-3312}:3306'
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: '12345678'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: 'robert'
            MYSQL_USER: 'robert'
            MYSQL_PASSWORD: '12345678'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        networks:
            - ticket-network
        volumes:
            - ticket-mysql-volume:/var/lib/mysql
    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - 2181:2181
        networks:
            - ticket-network

    kafka:
        image: confluentinc/cp-kafka
        restart: always
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            CONFLUENT_METRICS_ENABLE: 'false'
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        command: sh -c "((sleep 15 && \
            kafka-topics --create --topic created-order --bootstrap-server localhost:29092 --replication-factor 1 --partitions 1 && \
            kafka-topics --create --topic updated-order --bootstrap-server localhost:29092 --replication-factor 1 --partitions 1 && \
            kafka-topics --create --topic completed-order --bootstrap-server localhost:29092 --replication-factor 1 --partitions 1 && \
            kafka-topics --create --topic created-payment --bootstrap-server localhost:29092 --replication-factor 1 --partitions 1 && \
            kafka-topics --create --topic updated-ticket --bootstrap-server localhost:29092 --replication-factor 1 --partitions 1 && \
            kafka-topics --create --topic created-ticket --bootstrap-server localhost:29092 --replication-factor 1 --partitions 1)&) && /etc/confluent/docker/run ">
        ports:
            - 29092:29092
        depends_on: 
            - zookeeper
        networks:
            - ticket-network

        # exam: docker compose exec kafka kafka-topics --create --topic myTopic_02 --bootstrap-server localhost:29092 --replication-factor 1 --partitions 1
        # docker compose exec kafka kafka-console-consumer --from-beginning --bootstrap-server localhost:29092 --topic myTopic --timeout-ms 15000

    redis:
        image: 'bitnami/redis:latest'
        restart: always
        environment:
            - ALLOW_EMPTY_PASSWORD=yes
        volumes:
          - redis-volume:/bitnami/redis/data
        networks:
            - ticket-network
networks:
    ticket-network:
        driver: bridge
volumes:
  ticket-mysql-volume:
  order-mysql-volume:
  payment-mysql-volume:
  auth-mysql-volume:
  redis-volume:
